import argparse
import traceback
import atexit
import signal
from xml.dom import minidom
from com.cloudMedia.theKuroBox.sdk.util.util import Util
from com.cloudMedia.theKuroBox.sdk.util.logger import Logger
from com.cloudMedia.theKuroBox.sdk.util.stringUtils import StringUtils
from com.cloudMedia.theKuroBox.sdk.util.integerUtils import IntegerUtils
from com.cloudMedia.theKuroBox.sdk.util.timeout import timelimit
from com.cloudMedia.theKuroBox.sdk.app.application import Application
import os

app = None
isExitBySignal = False
@atexit.register
def on_exit():
    try:
        timelimit(5)(app.the_kurobox_app_stop)(isExitBySignal)
    except:
        #traceback.print_exc()
        pass
    
    
def on_handle_signal(signum, frame):
    isExit = False
    
    if (signum == signal.SIGTERM):
        isExitBySignal = True
        isExit = True
        #exit(0)
    elif (signum == signal.SIGABRT):
        isExitBySignal = False
        isExit = True
        
    if (isExit):
        try:
            timelimit(5)(app.the_kurobox_app_stop)(isExitBySignal)
        except:
            #traceback.print_exc()
            pass
        os._exit(0)


if __name__ == "__main__":
    errorHappen = False
    try:
        '''
        Get parameter send from Firmware when initialize Python Application
        -uid [UID]: Unique ID from Firmware
        -appdir [APP_FULL_PATH]: Application full path
        '''
        
        signal.signal(signal.SIGTERM, on_handle_signal)
        signal.signal(signal.SIGABRT, on_handle_signal)
        
        parser = argparse.ArgumentParser()
        parser.add_argument("-uid", help="Unique Identifier Number", required=True)
        parser.add_argument("-appdir", help="App Path", required=True)
        parser.add_argument("-restart", help="Set true if the app is crashed and rebooted", required=False, default="0")
        args, unknown = parser.parse_known_args()
        uid = args.uid
        uid = str(uid).strip()
        appdir = str(args.appdir).strip()
        reload = str(args.restart) == "1"
        
        '''
        Read descriptor.xml using application full path. 
        entryPoint: Application entry class. Application package split by ".".
        appId: Application ID created by AppsStore Server.
        '''
        descriptor = minidom.parse(StringUtils.append_if_missing(appdir, "/") + 'descriptor.xml')
        entryPoint = descriptor.getElementsByTagName("entryPoint")[0].firstChild.data
        appid = descriptor.getElementsByTagName("appId")[0].firstChild.data
        
        '''
        Dynamically load the application entry class
        '''
        appClass = Util.get_class(entryPoint)
        app = appClass()
        
        '''
        Start Application
        '''
        app.the_kurobox_app_start(IntegerUtils.to_integer(uid), IntegerUtils.to_integer(appid), appdir, reload)
    except Exception as es:
        '''
        Unexpected error occur when start application.
        '''
        Logger.log_warning("Error: Start application unexpected error occur: ", es)
        #traceback.print_exc()
        errorHappen = True
    
    if errorHappen:
        Application.kill_application(signal.SIGABRT)