/**
* Copyright 2014-2015 Cloud Media Sdn. Bhd.
*
* This file is part of Xuan Automation Application.
*
* Xuan Automation Application is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Xuan Automation Application is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Xuan Automation Application.  If not, see <http://www.gnu.org/licenses/>.
*/
/*global define*/
'use strict';
define([
    'underscore',
    'jquery',
    'templates'
], function (_, $, JST) {

	var kbxFontLoader = function() {
		this.initialize.apply(this, arguments);
	}
	
	// generated by JST
	var _tmpl = function (obj) {
		obj || (obj = {});
		var __t, __p = '';
		__p += '@font-face {\n\tfont-family: \'' +
		((__t = ( obj.family )) == null ? '' : __t) +
		'\';\n\tfont-style: \'' +
		((__t = ( obj.style )) == null ? '' : __t) +
		'\';\n\t' +
		((__t = ( obj.source_write )) == null ? '' : __t) +
		'}';
		return __p
	}

	var defaults = {
		style: 'normal',
	}

	var find_format = function(path) {
		var file_ext = path.match(/\.[0-9a-z]+$/i)[0];
		switch(file_ext) {
			case '.otf':
			return 'opentype';
			break;

			case '.ttf':
			return 'truetype';
			break;

			default:
			return file_ext.replace('.', '');
			break;
		}
	}

	var replaceLast = function(str, find, replace) {
		var index = str.lastIndexOf(find);

        if (index >= 0) {
            return str.substring(0, index) + replace + str.substring(index + find.length);
        }

        return str;
	}

	var definePath = function(str) {
		if (typeof PRODUCTION === 'undefined') {
			return Kurobox.host+str;
		}
		return str;
	}

	// test var
	//KbxFontLoader.load('RemoteIcon', ['/allweb/2000500/styles/fonts/RemoteIcon.woff']);var c=$('<p>', {css: {'font-family':'"RemoteIcon"'}}); c.html('&#xb104');$('body').append(c);

	_.extend(kbxFontLoader.prototype, {
		// this.store[family][style][format] = url
		initialize: function() {
			this.store = {};
		},
		load: function(family, srcs, style) {
			if (style == undefined) style = 'normal';

			var hasChanged = false;

			// check for format
			var format_data = {};
			if (typeof srcs == 'string') {
				// single source
				format_data[find_format(srcs)] = srcs;
			} else {
				// multiple source
				_.each(srcs, function(src) {
					format_data[find_format(src)] = src;
				})
			}

			// prepare store
			if (typeof this.store[family] == 'undefined') this.store[family] = {}
			if (typeof this.store[family][style] == 'undefined') this.store[family][style] = {};

			if (!_.isEqual(this.store[family][style], format_data)) {
				// chk for diff
				if (!_.isEmpty(this.store[family][style])) {
					var update_font = function(family, style, key, value) {
						this.store[family][style][key] = value;
						hasChanged = true;
					}.bind(this);

					_.each(format_data, function(value, key) {
						if (this.store[family][style][key] != undefined) {
							if (this.store[family][style][key] != value) {
								console.warn('Overriding font', family, style, key);
								update_font(family, style, key, value);
							}
						} else {
							update_font(family, style, key, value);
						}
					}.bind(this))
				} else {
					// totally empty
					// just override
					hasChanged = true;
					this.store[family][style] = format_data;
				}

			}

			if (hasChanged) {
				if ($('head #font-loader-context').length != 0) {
					$('head #font-loader-context').remove();
				}

				// start load by writing scripts to context
				var appendingStr = '<style ref="stylesheet" id="font-loader-context" type="text/css">';
				var src_output, style_clone;
				_.each(this.store, function(family, family_key) {
					_.each(family, function(style, style_key) {
						src_output = '';

						style_clone = _.clone(style);

						if (style_clone.eot != undefined) {
							src_output += 'src:url(\''+definePath(style_clone.eot)+'\');\n';
							style_clone.eot = undefined;
							delete style_clone.eot;
						}

						if (!_.isEmpty(style_clone)) {
							src_output += 'src:'
							_.each(style_clone, function(url, format) {
								// eot must be first and shud have no 'format' syntax
								src_output += 'url(\''+definePath(url)+'\') format(\''+format+'\'),\n';
							});

							// replace the last comma
							src_output = replaceLast(src_output, ',', ';');
						}

						appendingStr += _tmpl({
							family: family_key,
							style: style_key,
							source_write: src_output
						})
					})
				})

				appendingStr += '</style>'

				// write to context
				$('head').append(appendingStr);	
			}
		}
	})
	
	window.KbxFontLoader = new kbxFontLoader();

});